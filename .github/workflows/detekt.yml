# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow performs a static analysis of your Kotlin source code using
# Detekt.
#
# Scans are triggered:
# 1. On every push to default and protected branches
# 2. On every Pull Request targeting the default branch
# 3. On a weekly schedule
# 4. Manually, on demand, via the "workflow_dispatch" event
#
# The workflow should work with no modifications, but you might like to use a
# later version of the Detekt CLI by modifing the $DETEKT_RELEASE_TAG
# environment variable.
name: Scan with Detekt

on:
  # Triggers the workflow on push or pull request events but only for default and protected branches
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
     - cron: '26 14 * * 4'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Release tag associated with version of Detekt to be installed
  # SARIF support (required for this workflow) was introduced in Detekt v1.15.0
  DETEKT_RELEASE_TAG: v1.15.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "scan"
  scan:
    name: Scan
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3

    # Gets the download URL associated with the $DETEKT_RELEASE_TAG
    - name: Get Detekt download URL
      id: detekt_info
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api graphql --field tagName=$DETEKT_RELEASE_TAG --raw-field query='
          query getReleaseAssetDownloadUrl($tagName: String!) {
            repository(name: "detekt", owner: "detekt") {
              release(tagName: $tagName) {
                releaseAssets(name: "detekt", first: 1) {
                  nodes {
                    downloadUrl
                  }
                }
                tagCommit {
                  oid
                }
              }
            }
          }
        ' 1> gh_response.json

        DETEKT_RELEASE_SHA=$(jq --raw-output '.data.repository.release.releaseAssets.tagCommit.oid' gh_response.json)
        if [ $DETEKT_RELEASE_SHA != "37f0a1d006977512f1f216506cd695039607c3e5" ]; then
          echo "Release tag doesn't match expected commit SHA"
          exit 1
        fi

        DETEKT_DOWNLOAD_URL=$(jq --raw-output '.data.repository.release.releaseAssets.nodes[0].downloadUrl' gh_response.json)
        echo "download_url=$DETEKT_DOWNLOAD_URL" >> $GITHUB_OUTPUT

    # Sets up the detekt cli
    - name: Setup Detekt
      run: |
        dest=$( mktemp -d )
        curl --request GET \
          --url ${{ steps.detekt_info.outputs.download_url }} \
          --silent \
          --location \
          --output $dest/detekt
        chmod a+x $dest/detekt
        echo $dest >> $GITHUB_PATH

    # Performs static analysis using Detekt
    - name: Run Detekt
      continue-on-error: true
      run: |
        detekt --input ${{ github.workspace }} --report sarif:${{ github.workspace }}/detekt.sarif.json

    # Modifies the SARIF output produced by Detekt so that absolute URIs are relative
    # This is so we can easily map results onto their source files
    # This can be removed once relative URI support lands in Detekt: https://git.io/JLBbA
    - name: Make artifact location URIs relative
      continue-on-error: true
      run: |
        echo "$(
          jq \
            --arg github_workspace ${{ github.workspace }} \
            '. | ( .runs[].results[].locations[].physicalLocation.artifactLocation.uri |= if test($github_workspace) then .[($github_workspace | length | . + 1):] else . end )' \
            ${{ github.workspace }}/detekt.sarif.json
        )" > ${{ github.workspace }}/detekt.sarif.json

    # Uploads results to GitHub repository using the upload-sarif action
    - uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: ${{ github.workspace }}/detekt.sarif.json
        checkout_path: ${{ github.workspace }}
            - nombre: Acciones de Infracost
  # Puedes fijar la confirmación exacta o la versión.
  # usos: infracost/actions@0d27b734c72a1abb0aba3e2c3f54e4982cbd2591
  usos: infracost/actions@v2.1.0
  con:
    # Su clave API de Infracost. Se puede recuperar ejecutando `infracost configure get api_key`. Recomendamos utilizar su misma clave API en todos los entornos. Si no tiene una, descargue Infracost (https://www.infracost.io/docs/#quick-start) y ejecute `infracost auth login` para obtener una clave API gratuita.
    Clave API:
    # La ruta que se pasará hasta el "desglose de infracostos". Esta puede ser una ruta hacia un plan JSON de Terraform o un proyecto de Terraform.
    camino:
    # El comportamiento a utilizar al publicar comentarios de estimación de costos. Debe ser uno de 'actualización' | 'eliminar-y-nuevo' | 'escondido y nuevo' | 'nuevo'.
    comportamiento: # opcional, el valor predeterminado es actualizar
              - nombre: Ayudante de Sandboxes de perfil de Veracode
  # Puedes fijar la confirmación exacta o la versión.
  # usos: veracode/veracode-sandboxes-helper@baa0a8458605b92d261b6b8f7801fa67fdce501b
  usos: veracode/veracode-sandboxes-helper@v1.0.0
  con:
    # La actividad esperada de la acción: limpiar, promover el último escaneo, eliminar la zona de pruebas
    actividad: # opcional
    # Nombre de la aplicación Veracode
    nombre de la aplicación:
    # Nombre del Sandbox para acciones relacionadas con un Sandbox específico
    nombre-sandbox: # opcional
    # La cantidad de sandboxes escaneados más antiguos que se eliminarán
    cantidad limpia: # opcional, el valor predeterminado es 1
    # Elimina el sandbox después de su promoción. Solo funciona con la actividad [promocionar]. El valor predeterminado es falso
    eliminar al promocionar: # opcional, el valor predeterminado es falso
    # El número de días que el sandbox no tuvo actividad
    clean-modified-before: # opcional, el valor predeterminado es 0
                  - nombre: Trabajo en equipo GitHub Sync
  # Puedes fijar la confirmación exacta o la versión.
  # usos: Trabajo en equipo/github-sync@42dcac69eb5a41fad0d518efeb6aecf1e45f8d01
  usos: Trabajo en equipo/github-sync@v1.3.3
  con:
    # token de GitHub
    GITHUB_TOKEN:
    # URI de trabajo en equipo
    TRABAJO EN EQUIPO_URI:
    # Token de API de trabajo en equipo
    TEAMWORK_API_TOKEN:
    # ¿Quieres habilitar el etiquetado automático: verdadero/falso?
    AUTOMATIC_TAGGING: # opcional
    # El nombre de la columna a la que desea que se mueva la tarea, que distingue entre mayúsculas y minúsculas, una vez que se haya abierto el PR
    BOARD_COLUMN_OPENED: # opcional, el valor predeterminado es
    # El nombre de la columna a la que desea que se mueva la tarea, que distingue entre mayúsculas y minúsculas, una vez que se haya fusionado el PR
    BOARD_COLUMN_MERGED: # opcional, el valor predeterminado es
    # El nombre de la columna a la que le gustaría que se moviera la tarea, distinguiendo entre mayúsculas y minúsculas, si el PR se cerró sin fusionarse
    BOARD_COLUMN_CLOSED: # opcional, el valor predeterminado es
                      
